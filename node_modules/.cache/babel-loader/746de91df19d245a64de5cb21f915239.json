{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultTreeAdapter = exports.NodeType = void 0;\n\nconst html_js_1 = require(\"../common/html.js\");\n\nvar NodeType;\n\n(function (NodeType) {\n  NodeType[\"Document\"] = \"#document\";\n  NodeType[\"DocumentFragment\"] = \"#document-fragment\";\n  NodeType[\"Comment\"] = \"#comment\";\n  NodeType[\"Text\"] = \"#text\";\n  NodeType[\"DocumentType\"] = \"#documentType\";\n})(NodeType = exports.NodeType || (exports.NodeType = {}));\n\nfunction createTextNode(value) {\n  return {\n    nodeName: NodeType.Text,\n    value,\n    parentNode: null\n  };\n}\n\nexports.defaultTreeAdapter = {\n  //Node construction\n  createDocument() {\n    return {\n      nodeName: NodeType.Document,\n      mode: html_js_1.DOCUMENT_MODE.NO_QUIRKS,\n      childNodes: []\n    };\n  },\n\n  createDocumentFragment() {\n    return {\n      nodeName: NodeType.DocumentFragment,\n      childNodes: []\n    };\n  },\n\n  createElement(tagName, namespaceURI, attrs) {\n    return {\n      nodeName: tagName,\n      tagName,\n      attrs,\n      namespaceURI,\n      childNodes: [],\n      parentNode: null\n    };\n  },\n\n  createCommentNode(data) {\n    return {\n      nodeName: NodeType.Comment,\n      data,\n      parentNode: null\n    };\n  },\n\n  //Tree mutation\n  appendChild(parentNode, newNode) {\n    parentNode.childNodes.push(newNode);\n    newNode.parentNode = parentNode;\n  },\n\n  insertBefore(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n    parentNode.childNodes.splice(insertionIdx, 0, newNode);\n    newNode.parentNode = parentNode;\n  },\n\n  setTemplateContent(templateElement, contentElement) {\n    templateElement.content = contentElement;\n  },\n\n  getTemplateContent(templateElement) {\n    return templateElement.content;\n  },\n\n  setDocumentType(document, name, publicId, systemId) {\n    const doctypeNode = document.childNodes.find(node => node.nodeName === NodeType.DocumentType);\n\n    if (doctypeNode) {\n      doctypeNode.name = name;\n      doctypeNode.publicId = publicId;\n      doctypeNode.systemId = systemId;\n    } else {\n      const node = {\n        nodeName: NodeType.DocumentType,\n        name,\n        publicId,\n        systemId,\n        parentNode: null\n      };\n      exports.defaultTreeAdapter.appendChild(document, node);\n    }\n  },\n\n  setDocumentMode(document, mode) {\n    document.mode = mode;\n  },\n\n  getDocumentMode(document) {\n    return document.mode;\n  },\n\n  detachNode(node) {\n    if (node.parentNode) {\n      const idx = node.parentNode.childNodes.indexOf(node);\n      node.parentNode.childNodes.splice(idx, 1);\n      node.parentNode = null;\n    }\n  },\n\n  insertText(parentNode, text) {\n    if (parentNode.childNodes.length > 0) {\n      const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n\n      if (exports.defaultTreeAdapter.isTextNode(prevNode)) {\n        prevNode.value += text;\n        return;\n      }\n    }\n\n    exports.defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n  },\n\n  insertTextBefore(parentNode, text, referenceNode) {\n    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n\n    if (prevNode && exports.defaultTreeAdapter.isTextNode(prevNode)) {\n      prevNode.value += text;\n    } else {\n      exports.defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n  },\n\n  adoptAttributes(recipient, attrs) {\n    const recipientAttrsMap = new Set(recipient.attrs.map(attr => attr.name));\n\n    for (let j = 0; j < attrs.length; j++) {\n      if (!recipientAttrsMap.has(attrs[j].name)) {\n        recipient.attrs.push(attrs[j]);\n      }\n    }\n  },\n\n  //Tree traversing\n  getFirstChild(node) {\n    return node.childNodes[0];\n  },\n\n  getChildNodes(node) {\n    return node.childNodes;\n  },\n\n  getParentNode(node) {\n    return node.parentNode;\n  },\n\n  getAttrList(element) {\n    return element.attrs;\n  },\n\n  //Node data\n  getTagName(element) {\n    return element.tagName;\n  },\n\n  getNamespaceURI(element) {\n    return element.namespaceURI;\n  },\n\n  getTextNodeContent(textNode) {\n    return textNode.value;\n  },\n\n  getCommentNodeContent(commentNode) {\n    return commentNode.data;\n  },\n\n  getDocumentTypeNodeName(doctypeNode) {\n    return doctypeNode.name;\n  },\n\n  getDocumentTypeNodePublicId(doctypeNode) {\n    return doctypeNode.publicId;\n  },\n\n  getDocumentTypeNodeSystemId(doctypeNode) {\n    return doctypeNode.systemId;\n  },\n\n  //Node types\n  isTextNode(node) {\n    return node.nodeName === '#text';\n  },\n\n  isCommentNode(node) {\n    return node.nodeName === '#comment';\n  },\n\n  isDocumentTypeNode(node) {\n    return node.nodeName === NodeType.DocumentType;\n  },\n\n  isElementNode(node) {\n    return Object.prototype.hasOwnProperty.call(node, 'tagName');\n  },\n\n  // Source code location\n  setNodeSourceCodeLocation(node, location) {\n    node.sourceCodeLocation = location;\n  },\n\n  getNodeSourceCodeLocation(node) {\n    return node.sourceCodeLocation;\n  },\n\n  updateNodeSourceCodeLocation(node, endLocation) {\n    node.sourceCodeLocation = Object.assign(Object.assign({}, node.sourceCodeLocation), endLocation);\n  }\n\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","defaultTreeAdapter","NodeType","html_js_1","require","createTextNode","nodeName","Text","parentNode","createDocument","Document","mode","DOCUMENT_MODE","NO_QUIRKS","childNodes","createDocumentFragment","DocumentFragment","createElement","tagName","namespaceURI","attrs","createCommentNode","data","Comment","appendChild","newNode","push","insertBefore","referenceNode","insertionIdx","indexOf","splice","setTemplateContent","templateElement","contentElement","content","getTemplateContent","setDocumentType","document","name","publicId","systemId","doctypeNode","find","node","DocumentType","setDocumentMode","getDocumentMode","detachNode","idx","insertText","text","length","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","Set","map","attr","j","has","getFirstChild","getChildNodes","getParentNode","getAttrList","element","getTagName","getNamespaceURI","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","prototype","hasOwnProperty","call","setNodeSourceCodeLocation","location","sourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","assign"],"sources":["/Users/nam/Desktop/Programming/DogCatNaming/home/node_modules/parse5-htmlparser2-tree-adapter/node_modules/parse5/dist/cjs/tree-adapters/default.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultTreeAdapter = exports.NodeType = void 0;\nconst html_js_1 = require(\"../common/html.js\");\nvar NodeType;\n(function (NodeType) {\n    NodeType[\"Document\"] = \"#document\";\n    NodeType[\"DocumentFragment\"] = \"#document-fragment\";\n    NodeType[\"Comment\"] = \"#comment\";\n    NodeType[\"Text\"] = \"#text\";\n    NodeType[\"DocumentType\"] = \"#documentType\";\n})(NodeType = exports.NodeType || (exports.NodeType = {}));\nfunction createTextNode(value) {\n    return {\n        nodeName: NodeType.Text,\n        value,\n        parentNode: null,\n    };\n}\nexports.defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: NodeType.Document,\n            mode: html_js_1.DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: NodeType.DocumentFragment,\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: NodeType.Comment,\n            data,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === NodeType.DocumentType);\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: NodeType.DocumentType,\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            exports.defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (exports.defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        exports.defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && exports.defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            exports.defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === NodeType.DocumentType;\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = Object.assign(Object.assign({}, node.sourceCodeLocation), endLocation);\n    },\n};\n//# sourceMappingURL=default.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}